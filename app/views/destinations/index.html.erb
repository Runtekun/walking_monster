<!-- 背景全体 -->
<div class="w-full min-h-screen relative"
     style="background-image: url(<%= asset_path('destinations-bg.jpg') %>);
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;">

  <!-- 背景のオーバーレイ -->
  <div class="absolute inset-0 z-0"></div>

  <!-- メインコンテナ -->
  <div class="relative z-10 flex justify-center items-start pt-10 pb-16 min-h-screen">
    <div class="w-full max-w-3xl bg-white bg-opacity-90 rounded-xl shadow-xl px-6 py-10 font-[PixelMplus10]">

      <!-- ヘッダー -->
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-[#3a1e00]">🗺️ 行き先を決めよう！</h1>
        <p class="text-sm text-[#5f4b32] mt-1">モンスターと一緒に冒険の旅に出かけよう！</p>
      </div>

      <!-- ステータスパネル -->
      <div class="flex items-center justify-between bg-[#fff4d1] border-2 border-yellow-300 rounded-lg p-4 shadow-md mb-6">
        <div class="flex items-center gap-4">
          <img src="/monster_icon.png" class="w-14 h-14" alt="モンスター" />
          <div>
            <p class="text-lg font-bold text-[#4b3300]">Lv5</p>
            <div class="w-40 bg-yellow-200 h-3 rounded-full overflow-hidden">
              <div class="bg-green-500 h-full w-[40%]"></div>
            </div>
            <p class="text-xs text-gray-700 mt-1">60 / 150 XP</p>
          </div>
        </div>
        <div class="text-right text-sm text-gray-600">
          <p>今日の冒険回数：<strong>1/3</strong></p>
        </div>
      </div>

      <!-- 地図中心地設定 -->
      <div class="bg-white border border-yellow-300 p-4 rounded-xl shadow mb-6 space-y-2">
        <label for="address" class="text-sm font-bold text-[#3e2c00]">🏰 地図の中心を設定（例：東京駅）</label>
        <div class="flex gap-2">
          <input id="address" type="text" placeholder="例：東京駅"
            class="flex-1 px-4 py-2 border rounded-lg border-yellow-400 focus:outline-none focus:ring-2 focus:ring-yellow-300 bg-yellow-50" />
          <button onclick="codeAddress()"
            class="px-4 py-2 bg-yellow-400 hover:bg-yellow-500 text-white font-bold rounded-lg shadow">
            検索
          </button>
        </div>
      </div>

      <!-- 出発地・目的地 -->
      <div class="grid sm:grid-cols-2 gap-4 bg-white p-4 border border-yellow-300 rounded-xl shadow mb-6">
        <div>
          <label for="start" class="block text-sm font-bold text-[#3e2c00]">🚶 出発地</label>
          <input id="start" type="text" placeholder="例：自宅・駅"
            class="w-full px-4 py-2 border rounded-lg border-yellow-400 bg-yellow-50 focus:outline-none focus:ring-2 focus:ring-yellow-300" />
        </div>
        <div>
          <label for="end" class="block text-sm font-bold text-[#3e2c00]">🎯 目的地</label>
          <input id="end" type="text" placeholder="例：〇〇公園・カフェ"
            class="w-full px-4 py-2 border rounded-lg border-yellow-400 bg-yellow-50 focus:outline-none focus:ring-2 focus:ring-yellow-300" />
        </div>
      </div>

      <!-- 経路表示 -->
      <div class="mb-6">
        <button onclick="getRoute()"
          class="w-full py-3 bg-green-600 hover:bg-green-700 text-white font-bold rounded-lg shadow-xl text-lg transition">
          🌟 経路を表示（冒険スタート）
        </button>
      </div>

      <!-- マップ -->
      <div class="rounded-lg overflow-hidden border-2 border-yellow-300 shadow-xl mb-4">
        <div id="map" class="w-full h-[400px] bg-gray-200"></div>
      </div>

      <!-- 経路情報 -->
      <div id="route-info" class="text-center font-bold text-[#3e2c00] mb-4 text-base"></div>

      <!-- 保存フォーム -->
      <%= form_with url: destinations_path, method: :post do %>
        <%= hidden_field_tag 'destination[start]', nil, id: 'hidden_start' %>
        <%= hidden_field_tag 'destination[end]', nil, id: 'hidden_end' %>
        <%= hidden_field_tag 'destination[distance]', nil, id: 'hidden_distance' %>
        <%= hidden_field_tag 'destination[duration]', nil, id: 'hidden_duration' %>
        <%= hidden_field_tag 'destination[steps]', nil, id: 'hidden_steps' %>

        <%= submit_tag '✅ 保存する（冒険記録）', class: "w-full py-3 bg-blue-500 hover:bg-blue-600 text-white font-bold rounded-lg shadow transition mb-10" %>
      <% end %>

      <!-- 行き先リスト -->
      <div class="bg-white border border-yellow-300 rounded-xl shadow p-4">
        <h2 class="text-xl font-bold text-[#3e2c00] mb-4">📜 あなたの冒険リスト</h2>
        <% if @destinations.any? %>
          <% @destinations.each do |d| %>
            <% next if d.id.nil? %> <!-- ← nilレコードを除外 -->

            <div class="flex justify-between items-center bg-yellow-50 p-3 rounded-lg mb-2">
              <div class="flex-1 min-w-0">
                <p class="font-semibold text-[#3e2c00] truncate"><%= d.start %> → <%= d.end %></p>
                <p class="text-sm text-gray-600"><%= d.distance %></p>
              </div>
              <div class="ml-4 shrink-0">
                <%= link_to "詳細", destination_path(d), class: "text-blue-600 hover:underline text-sm whitespace-nowrap" %>
              </div>
            </div>
          <% end %>
        <% else %>
          <p class="text-gray-500 text-sm">まだ冒険の記録がありません。</p>
        <% end %>
      </div>
    </div>
  </div>
</div>

<!-- JavaScript -->
<script>
  // グローバル変数定義
  if (typeof geocoder === "undefined") var geocoder;
  if (typeof map === "undefined") var map;
  if (typeof marker === "undefined") var marker;
  if (typeof infoWindow === "undefined") var infoWindow;
  if (typeof directionsService === "undefined") var directionsService;
  if (typeof directionsRenderer === "undefined") var directionsRenderer;

  // 初期化
  function initMap() {
    const mapElement = document.getElementById('map');
    if (!mapElement) return;

    const mapOptions = {
      center: { lat: 35.6803997, lng: 139.7690174 },
      zoom: 10
    };

    geocoder = new google.maps.Geocoder();
    map = new google.maps.Map(mapElement, mapOptions);

    marker = new google.maps.Marker({
      position: mapOptions.center,
      map: map,
      draggable: true
    });

    infoWindow = new google.maps.InfoWindow();
    infoWindow.setContent("東京駅");
    infoWindow.open(map, marker);

    marker.addListener('dragend', function () {
      const pos = marker.getPosition();
      geocoder.geocode({ location: pos }, function (results, status) {
        if (status === 'OK' && results[0]) {
          infoWindow.setContent(results[0].formatted_address);
          infoWindow.open(map, marker);
        } else {
          infoWindow.setContent('住所を取得できませんでした');
          infoWindow.open(map, marker);
        }
      });
    });

    directionsService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer({ map: map });
  }

  // Turbo対応：キャッシュ前にマップ破棄
  document.addEventListener("turbo:before-cache", () => {
    if (marker) marker.setMap(null);
    if (directionsRenderer) directionsRenderer.setMap(null);
  });

  // Turbo対応：ロード時マップ初期化
  document.addEventListener("turbo:load", () => {
    if (typeof google !== 'undefined' && google.maps) {
      initMap();
    }
  });

  // 住所検索→マップ表示
  function codeAddress() {
    let inputAddress = document.getElementById('address').value;

    geocoder.geocode({ address: inputAddress }, function (results, status) {
      if (status === 'OK') {
        const location = results[0].geometry.location;

        // 既存マーカー削除
        if (marker) marker.setMap(null);

        // 新しいマーカー設置（ドラッグ可能）
        marker = new google.maps.Marker({
          map: map,
          position: location,
          draggable: true
        });

        // 地図中心を住所へ
        map.setCenter(location);

        // 吹き出し設定
        infoWindow.setContent(results[0].formatted_address);
        infoWindow.open(map, marker);

        // マーカー移動時に住所を再取得
        marker.addListener('dragend', function () {
          const newPos = marker.getPosition();
          geocoder.geocode({ location: newPos }, function (results, status) {
            if (status === 'OK' && results[0]) {
              infoWindow.setContent(results[0].formatted_address);
              infoWindow.open(map, marker);
            } else {
              infoWindow.setContent('住所を取得できませんでした');
              infoWindow.open(map, marker);
            }
          });
        });

      } else {
        alert('該当する結果がありませんでした：' + status);
      }
    });
  }

  // 経路検索と表示
  function getRoute() {
    const start = document.getElementById("start").value;
    const end = document.getElementById("end").value;

    const request = {
      origin: start,
      destination: end,
      travelMode: google.maps.TravelMode.WALKING
    };

    directionsService.route(request, function (result, status) {
      if (status === "OK") {
        directionsRenderer.setDirections(result);

        const leg = result.routes[0].legs[0];
        const distance = leg.distance.text;
        const duration = leg.duration.text;
        const distanceMeters = leg.distance.value;
        const steps = Math.round(distanceMeters / 0.7);

        document.getElementById("route-info").innerHTML =
          `距離: ${distance}・所要時間: ${duration}・推定歩数: ${steps.toLocaleString()} 歩`;

        // hidden値に代入
        document.getElementById("hidden_start").value = start;
        document.getElementById("hidden_end").value = end;
        document.getElementById("hidden_distance").value = distance;
        document.getElementById("hidden_duration").value = duration;
        document.getElementById("hidden_steps").value = steps;
      } else {
        alert("ルート検索に失敗しました: " + status);
      }
    });
  }
</script>

<!-- Google Maps 読み込み -->
<% content_for :google_maps do %>
  <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&callback=initMap">
  </script>
<% end %>