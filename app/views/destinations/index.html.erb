<div class="space-y-4 w-full max-w-md mx-auto my-6">
  <input id="address" type="textbox" value="東京駅" 
    class="px-4 py-2 border rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-blue-400" placeholder="住所を入力してください" >
  
  <!-- 検索ボタン -->
  <input type="button" value="検索" onclick="codeAddress()" 
    class="px-6 py-2 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400">

      <h2 class="text-lg font-semibold">さあ、今日の行き先を決めよう！</h2>
    
      <!-- 始点 -->
      <input id="start" type="text" placeholder="出発地を入力してください"
        class="w-full px-4 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
    
      <!-- 終点 -->
      <input id="end" type="text" placeholder="目的地を入力してください"
        class="w-full px-4 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400">
    
      <!-- 経路表示ボタン -->
      <button onclick="getRoute()"
        class="w-full px-6 py-2 bg-gray-700 text-white font-semibold rounded-lg shadow-md hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-400">
        経路を表示
      </button>
</div>

<!-- マップを表示する要素 -->
<div class="w-full h-[600px]" id="map"></div>

<!-- 経路情報表示 -->
<div id="route-info" class="text-center mt-4 text-sm text-gray-700 font-medium"></div>

<!-- 保存フォーム -->
<%= form_with url: destinations_path, method: :post do %>
  <%= hidden_field_tag 'destination[start]', nil, id: 'hidden_start' %>
  <%= hidden_field_tag 'destination[end]', nil, id: 'hidden_end' %>
  <%= hidden_field_tag 'destination[distance]', nil, id: 'hidden_distance' %>
  <%= hidden_field_tag 'destination[duration]', nil, id: 'hidden_duration' %>
  <%= hidden_field_tag 'destination[steps]', nil, id: 'hidden_steps' %>

  <%= submit_tag '保存する', class: "w-full px-6 py-2 mt-4 bg-green-500 text-white font-semibold rounded-lg shadow-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-400" %>
<% end %>

<!-- 詳細 -->
<h2 class="text-gray-600">あなたの行き先リスト</h2>
<% if @destinations.any? %>
  <% @destinations.each do |d| %>
    <div class="border-b py-2">
      <strong><%= d.start %> → <%= d.end %></strong>（<%= d.distance %>）
      <%= link_to "詳細", destination_path(d), class: "text-blue-500 hover:underline ml-2" %>
    </div>
  <% end %>
<% else %>
  <p class="text-gray-600">現在、登録されている経路がありません。</p>
<% end %>

<script>
  // --- グローバル変数の重複定義防止（Turbo対策） ---
  if (typeof geocoder === "undefined") {
    var geocoder;
  }
  if (typeof map === "undefined") {
    var map;
  }
  if (typeof marker === "undefined") {
    var marker;
  }
  if (typeof directionsService === "undefined") {
    var directionsService;
  }
  if (typeof directionsRenderer === "undefined") {
    var directionsRenderer;
  }

  // --- 地図の初期化処理 ---
  function initMap() {
    const mapElement = document.getElementById('map');
    if (!mapElement) return; // 地図エリアがなければ終了

    const mapOptions = {
      center: { lat: 35.6803997, lng: 139.7690174 }, // 東京駅
      zoom: 10
    };

    // ジオコーダーと地図の初期化
    geocoder = new google.maps.Geocoder();
    map = new google.maps.Map(mapElement, mapOptions);

    // 初期マーカーの設置
    marker = new google.maps.Marker({
      position: { lat: 35.6803997, lng: 139.7690174 },
      map: map
    });

    // 経路検索用サービスと描画の初期化
    directionsService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer({ map: map });
  }

  // --- Turboでキャッシュされる前にマップを破棄 ---
  document.addEventListener("turbo:before-cache", () => {
    if (marker) marker.setMap(null);
    if (directionsRenderer) directionsRenderer.setMap(null);
  });

  // --- Turboページ読み込み時にマップ初期化 ---
  document.addEventListener("turbo:load", () => {
    if (typeof google !== 'undefined' && google.maps) {
      initMap();
    }
  });

  // --- 入力された住所から地図を移動させる ---
  function codeAddress() {
    let inputAddress = document.getElementById('address').value;

    geocoder.geocode({ 'address': inputAddress }, function(results, status) {
      if (status === 'OK') {
        // 既存マーカー削除
        if (marker) marker.setMap(null);

        // 地図の中心を住所の位置に変更
        map.setCenter(results[0].geometry.location);

        // 新しいマーカーを表示
        marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location
        });
      } else {
        alert('該当する結果がありませんでした：' + status);
      }
    });
  }

  // --- 経路検索と表示、フォーム値の設定 ---
  function getRoute() {
    const start = document.getElementById("start").value;
    const end = document.getElementById("end").value;

    const request = {
      origin: start,
      destination: end,
      travelMode: google.maps.TravelMode.WALKING
    };

    directionsService.route(request, function(result, status) {
      if (status === "OK") {
        // 経路を地図に描画
        directionsRenderer.setDirections(result);

        const leg = result.routes[0].legs[0];
        const distance = leg.distance.text; // "3.4 km" など
        const duration = leg.duration.text; // "45 分" など
        const distanceMeters = leg.distance.value; // メートル単位
        const steps = Math.round(distanceMeters / 0.7); // 推定歩数（70cm/歩）

        // 経路情報を画面に表示
        document.getElementById("route-info").innerHTML = `距離: ${distance}・所要時間: ${duration}・推定歩数: ${steps.toLocaleString()} 歩`;

        // hiddenフィールドに値を代入（保存用）
        document.getElementById("hidden_start").value = start;
        document.getElementById("hidden_end").value = end;
        document.getElementById("hidden_distance").value = distance;
        document.getElementById("hidden_duration").value = duration;
        document.getElementById("hidden_steps").value = steps;
      } else {
        alert("ルート検索に失敗しました: " + status);
      }
    });
  }
</script>

<!-- Google Maps APIを読み込み -->
<% content_for :google_maps do %>
  <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&callback=initMap">
  </script>
<% end %>